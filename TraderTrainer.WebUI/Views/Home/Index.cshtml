@model TraderTrainer.WebUI.Models.StockDataModel

@{
    ViewBag.Title = "Index";
}

<div class="modal fade" id="orderModal" 
     tabindex="-1" role="dialog" aria-labelledby="orderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="orderModalLabel">Order</h4>
            </div>
            <div class="modal-body">
                <p>Place an order... which stock? Buy or sell? Volume? How much will that cost?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Place Order</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartCanvasContainer1">
            <canvas class="mainChartCanvas" id="chartCanvas1"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartCanvasContainer2">
            <canvas class="mainChartCanvas" id="chartCanvas2"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartVolumeCanvasContainer1">
            <canvas class="volumeChartCanvas" id="volumeCanvas1"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartVolumeCanvasContainer2">
            <canvas class="volumeChartCanvas" id="volumeCanvas2"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#orderModal">Place Order</button>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartCanvasContainer3">
            <canvas class="mainChartCanvas" id="chartCanvas3"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartCanvasContainer4">
            <canvas class="mainChartCanvas" id="chartCanvas4"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div id="chartVolumeCanvasContainer3">
                <canvas class="volumeChartCanvas" id="volumeCanvas3"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div id="chartVolumeCanvasContainer4">
                <canvas class="volumeChartCanvas" id="volumeCanvas4"></canvas>
            </div>
        </div>
    </div>
</div>
<script>

   // $("#chartCanvasContainer1").resizeable();

    

    $(window).resize(function () {
        'use strict';

        var mainCanvases = $(".mainChartCanvas");
        var i = 0;
        for (i = 0; i < mainCanvases.length; i++) {
            mainCanvases[i].width = mainCanvases[i].parentElement.clientWidth;
            mainCanvases[i].height = mainCanvases[i].width / 1.6;
        }
       
        var volumeCanvases = $(".volumeChartCanvas");
        var i = 0;
        for (i = 0; i < volumeCanvases.length; i++) {
            volumeCanvases[i].width = volumeCanvases[i].parentElement.clientWidth;
            volumeCanvases[i].height = volumeCanvases[i].width / 2.4;
        }

        TT.redrawAll();
    });

    $(document).ready(function () {
        'use strict';

        $("#pauseToggle").click(function () {
            'use strict';
            TT.isPaused = !TT.isPaused;

            if (TT.isPaused)
                this.innerText = "Go";
            else
                this.innerText = "Pause";
        });

        var openPrices = [ 
@foreach( var l in Model.Lines )
{
    @l.Open.ToString(); @:,
}
        ];

        var highPrices = [
@foreach( var l in Model.Lines )
{
    @l.High.ToString(); @:,
}
        ];

        var lowPrices = [
@foreach( var l in Model.Lines )
{
    @l.Low.ToString(); @:,
}
        ];

        var closePrices = [
@foreach( var l in Model.Lines )
{
    @l.Close.ToString(); @:,
}
        ];

        var volumes = [
@foreach( var l in Model.Lines )
{
    @l.Volume.ToString(); @:,
}
        ];

        TT.stocks[0] = new Stock(openPrices, highPrices, lowPrices, closePrices, volumes);
        TT.stocks[1] = new Stock(openPrices, highPrices, lowPrices, closePrices, volumes);
        TT.stocks[2] = new Stock(openPrices, highPrices, lowPrices, closePrices, volumes);
        TT.stocks[3] = new Stock(openPrices, highPrices, lowPrices, closePrices, volumes);

        TT.daysVisible = 30;
        
        TT.currentDay = 0;


      //  var mainChart;//, volumeChart; 
        
        //var theMainChartCanvas = document.getElementById("chartCanvas1"); //("#chartCanvas");

        var i;
        var mainChartCanvases = $(".mainChartCanvas");
        for (i = 0; i < mainChartCanvases.length; i++) {
            TT.mainCharts[i] = new Chart(mainChartCanvases[i]);
            TT.mainCharts[i].axesEnabled = true;
            TT.mainCharts[i].horizontalGridLinesEnabled = true;
            TT.mainCharts[i].dataSeriesList = [{
                drawFunction: Chart.prototype.drawCandlestickSeries, 
                dataSeries: TT.stocks[i]
            },
            {
                drawFunction: Chart.prototype.drawLineSeries,
                dataSeries: TT.stocks[i].closePrices
            }];
        }
        
        var volumeChartCanvases = $(".volumeChartCanvas");

        //var theVolumeChartCanvas = document.getElementById("volumeCanvas1");

        for (i = 0; i < volumeChartCanvases.length; i++) {
            TT.volumeCharts[i] = new Chart(volumeChartCanvases[i]);
            TT.volumeCharts[i].axesEnabled = true;
            TT.volumeCharts[i].horizontalGridLinesEnabled = false;
            TT.volumeCharts[i].dataSeriesList = [{
                drawFunction: Chart.prototype.drawColumnSeries,
                dataSeries: TT.stocks[i].volumes
            }];
        }
        
        TT.redrawAll();

        window.setInterval(function () {
            if (TT.isPaused)
                return;
            
            TT.currentDay++;

            TT.redrawAll();

        }, 1000);

    });
</script>