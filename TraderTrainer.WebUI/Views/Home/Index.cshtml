@model TraderTrainer.WebUI.Models.StockDataModel

@{
    ViewBag.Title = "Index";
}

<div class="modal fade" id="orderModal" 
     tabindex="-1" role="dialog" aria-labelledby="orderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="orderModalLabel">Order</h4>
            </div>
            <div class="modal-body">
                <p>Place an order... which stock? Buy or sell? Volume? How much will that cost?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Place Order</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartCanvasContainer1">
            <canvas class="chartCanvas" id="chartCanvas1"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartCanvasContainer2">
            <canvas class="chartCanvas" id="chartCanvas2"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartVolumeCanvasContainer1">
            <canvas class="chartCanvas" id="volumeCanvas1"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartVolumeCanvasContainer2">
            <canvas class="chartCanvas" id="volumeCanvas2"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#orderModal">Place Order</button>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="chartCanvasContainer3">
            <canvas class="chartCanvas" id="chartCanvas3"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div id="chartCanvasContainer4">
            <canvas class="chartCanvas" id="chartCanvas4"></canvas>
        </div>
    </div>
</div>
<script>

   // $("#chartCanvasContainer1").resizeable();

    var TT = {
        mainChart: undefined,
        volumeChart: undefined,
        stock: undefined,
        currentDay: 0,
        daysVisible: 30,
        isPaused: false,
        redrawAll: function () {
            this.mainChart.drawAll(this.stock, this.currentDay, this.daysVisible, this.daysVisible);
            this.volumeChart.drawAll(this.stock, this.currentDay, this.daysVisible, this.daysVisible);
        }
    };

    $(window).resize(function () {
        'use strict';

        var theCanvas = document.getElementById("chartCanvas1");
        var theContainingDiv = document.getElementById("chartCanvasContainer1");

        theCanvas.width = theContainingDiv.clientWidth;
        theCanvas.height = theCanvas.width / 1.6;

        TT.redrawAll();
    });

    $(document).ready(function () {
        'use strict';

        $("#pauseToggle").click(function () {
            'use strict';
            TT.isPaused = !TT.isPaused;

            if (TT.isPaused)
                this.innerText = "Go";
            else
                this.innerText = "Pause";
        });

        var openPrices = [ 
@foreach( var l in Model.Lines )
{
    @l.Open.ToString(); @:,
}
        ];

        var highPrices = [
@foreach( var l in Model.Lines )
{
    @l.High.ToString(); @:,
}
        ];

        var lowPrices = [
@foreach( var l in Model.Lines )
{
    @l.Low.ToString(); @:,
}
        ];

        var closePrices = [
@foreach( var l in Model.Lines )
{
    @l.Close.ToString(); @:,
}
        ];

        var volumes = [
@foreach( var l in Model.Lines )
{
    @l.Volume.ToString(); @:,
}
        ];

        TT.stock = new Stock(openPrices, highPrices, lowPrices, closePrices, volumes);

        TT.daysVisible = 30;
        
        TT.currentDay = 0;


      //  var mainChart;//, volumeChart; 
        
        var theMainChartCanvas = document.getElementById("chartCanvas1"); //("#chartCanvas");

        TT.mainChart = new Chart(theMainChartCanvas);
        TT.mainChart.axesEnabled = true;
        TT.mainChart.horizontalGridLinesEnabled = true;
        TT.mainChart.priceSeriesList = [Chart.prototype.drawCandlestickSeries, Chart.prototype.drawCloseLineSeries];

        var theVolumeChartCanvas = document.getElementById("volumeCanvas1");

        TT.volumeChart = new Chart(theVolumeChartCanvas);
        TT.volumeChart.axesEnabled = true;
        TT.volumeChart.horizontalGridLinesEnabled = false;
        TT.volumeChart.volumeSeriesList = [Chart.prototype.drawVolumeColumnSeries];
        
        window.setInterval(function () {
            if (TT.isPaused)
                return;

            TT.redrawAll();

            TT.currentDay++;
        }, 1000);

    });
</script>